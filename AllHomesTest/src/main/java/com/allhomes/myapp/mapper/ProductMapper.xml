<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.allhomes.myapp.product.ProductDaoImp">
	<!-- 제품 + 리뷰 + 스토어 -->
	<select id="productList" parameterType="String" resultType="com.allhomes.myapp.product.ProductVO">
		select s.s_name as s_name, p.pd_name as pd_name, round(p.price-(p.price*p.discount/100), -1) as dc_price, p.status as status, 
    	r.pd_no as pd_no, r.userid as userid, r.img as img, r.content as content, r.writedate as writedate, r.rating as rating 
    	from product p, store s, review r where p.s_no=s.s_no and r.pd_no=p.pd_no
	</select>
  	<!-- 모든 제품 조회 -->
  	<select id="productAllList" parameterType="String" resultType="com.allhomes.myapp.product.ProductVO">
  	    select pd_no, s_no, pd_name, price, discount, round(price-(price*discount/100), -1) as dc_price, main_img, stock, status, sub_c, pd_img from product
  	    <choose>
  	    	<when test="sortPd!=null and sortPd.equals('recent')">
  	    		order by pd_no desc
  	    	</when>
  	    	<when test="sortPd!=null and sortPd.equals('saled')">
  	    		where pd_no in (select pd_no from (select p.pd_no, c.pc_no, c.pc_date from product p, purchase c where p.pd_no=c.pd_no order by c.pc_date desc))
  	    	</when>
  	    	<when test="sortPd!=null and sortPd.equals('rowPrice')">
  	    		order by (price-(price*discount/100))
  	    	</when>
  	    </choose>
  	</select>
  	<!-- 카테고리별 제품 조회 -->
	<select id="productCateList" parameterType="String" resultType="com.allhomes.myapp.product.ProductVO">
  		select s_no, pd_no, pd_name, price, discount, round(price-(price*discount/100), -1) as dc_price, main_img, sub_c from product
  			<if test="pdCate.equals(all)">
  				order by pd_no desc
  			</if>
  			<if test="!pdCate.equals(all)">
  				where sub_c=#{param1} order by pd_no desc
  			</if>
  			<!-- <when test="pdCate.equals('sofa_f')">
  				where sub_c=#{param1}
  			</when>
  			<when test="pdCate!=null and pdCate.equals('stud_f')">
  				where sub_c=#{param1}
  			</when>
  			<when test="pdCate!=null and pdCate.equals('bed_f')">
  				where sub_c='침실가구'  			
  			</when>
  			<when test="pdCate!=null and pdCate.equals('kitchen_f')">
  				where sub_c='주방가구'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('tbl')">
  				where sub_c='테이블/의자/스툴'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('light')">
  				where sub_c='조명'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('deco')">
  				where sub_c='장식소품'
  			</when> 
  			<when test="pdCate!=null and pdCate.equals('walldeco')">
  				where sub_c='월데코/장식'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('homgall')">
  				where sub_c='홈갤러리'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('flower')">
  				where sub_c='플라워/식물'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('kitchen_a')">
  				where sub_c='주방가전'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('clean')">
  				where sub_c='청소가전'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('life')">
  				where sub_c='생활가전'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('season')">
  				where sub_c='계절가전'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('tv')">
  				where sub_c='영상음향가전'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('cabinet')">
  				where sub_c='수납장/서랍장'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('box')">
  				where sub_c='리빙박스/수납함/바구니'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('hanger')">
  				where sub_c='행거/옷걸이'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('shelf')">
  				where sub_c='선반/거치대'
  			</when>
			<when test="pdCate!=null and pdCate.equals('shoe')">
  				where sub_c='현관/신발정리'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('paper')">
  				where sub_c='벽지/시트지'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('tile')">
  				where sub_c='타일/파벽돌'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('paint')">
  				where sub_c='페인트/부자재'
  			</when>
  			<when test="pdCate!=null and pdCate.equals('handle')">
  				where sub_c='손잡이/방문/유리'
  			</when>
			<when test="pdCate!=null and pdCate.equals('tool')">
  				where sub_c='공구/접착제/보수용품'
  			</when>  	
  		</choose> -->		
  	</select> 
  	<!-- 제품 리뷰 조회 -->
  	<select id="productReviewList" parameterType="int" resultType="com.allhomes.myapp.review.ReviewVO">
  		select userid, pd_no, rating, content, writedate, s_no from review where pd_no=#{pd_no}
  	</select>
  	<!-- 메인페이지 제품리스트 -->
  	<select id="productMainList" resultType="com.allhomes.myapp.product.ProductVO">
  		select pd_no, s_no, pd_name, price, discount, round(price-(price*discount/100), -1) as dc_price, main_img, stock, status, sub_c from product where pd_no in (select pd_no from (select pd_no from product order by pd_no desc) where rownum <![CDATA[<]]> 9)
  	</select>
  	<!-- 등록된 상품 수 조회 -->
  	<select id="getAllProductCount" resultType="int">
  		select count(pd_no) from product
	</select>  	
  	<!-- 스토어번호로 제품 검색 -->
  	<select id="selectStoreProduct" resultType="com.allhomes.myapp.product.ProductVO">
  		select pd_no, s_no, pd_name, price, discount, main_img, stock, status, sub_c, pd_img, pd_exp, o_value from product where s_no=#{s_no}
  	</select>  	
  	<!-- 제품 번호로 검색 -->
  	<select id="selectProduct" parameterType="int" resultType="com.allhomes.myapp.product.ProductVO">
  		select pd_no, s_no, pd_name, price, discount, main_img, stock, status, sub_c, pd_img, pd_exp, shipping_c, o_value from product where pd_no=#{pd_no}
  	</select>
  	<!-- 제품+스토어 조인 -->
  	<select id="joinProductStore" resultType="com.allhomes.myapp.product.ProductVO">
  		select p.pd_no, p.pd_name, p.main_img, p.discount, p.price, s.s_no, s.s_name from product p, store s where p.s_no=s.s_no
  	</select>
  	<!-- 제품 추가 -->
  	<insert id="insertProduct" parameterType="com.allhomes.myapp.product.ProductVO">
  		insert into product(pd_no, s_no, pd_name, price, discount, main_img, stock, status, sub_c, pd_img, pd_exp, shipping_c, o_value)
  		 values(pd_sq.nextval, #{s_no}, #{pd_name}, #{price}, #{discount}, #{main_img}, #{stock}, #{status}, #{sub_c}, #{pd_img}, #{pd_exp}, #{shipping_c}, #{o_value})
  	</insert>
  	
  	<!-- 제품 수정 테스트-->
  	<update id="editProduct" parameterType="com.allhomes.myapp.product.ProductVO">
  		update product set pd_name=#{pd_name}, price=#{price}, discount=#{discount},
  		 stock=#{stock}, status=#{status}, sub_c=#{sub_c}, pd_exp=#{pd_exp}, shippig_c=#{shipping_c}, o_value=#{o_value} where pd_no=#{pd_no}
  	</update>
  	
  	<!--제품수정
  	<update id="editProduct" parameterType="com.allhomes.myapp.product.ProductVO">
  		update product set  pd_name=#{pd_name}, price=#{price}, discount=#{discount},
  		main_img=#{main_img}, stock=#{stock}, status=#{status}, sub_c=#{sub_c},pd_img=#{pd_img} where pd_no=#{pd_no}
  	</update> -->
  	
  	<!-- 제품 삭제 -->
  	<delete id="delProduct" parameterType="int">
  		delete from product where pd_no=#{pd_no}
  	</delete>
  	
  	<!-- 스토어의 총 제품 개수 검색 -->
  	<select id="countProduct" resultType="int">
  		select count(*) from product where s_no=#{s_no}
  	</select>
  	
  </mapper>